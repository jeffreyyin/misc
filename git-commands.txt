Set the editor used to type the message during commit
git config --global core.editor

git init

git clone git@github.com:tejasapatil/misc.git

Some useful alias
git config --global user.name "Tejas Patil"
git config --global user.email "tejas.patil.cs@gmail.com"
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.unstage 'reset HEAD --'
git config --global alias.last 'log -1 HEAD'

Generating SSH keys:
https://help.github.com/articles/generating-ssh-keys
http://eagain.net/articles/git-for-computer-scientists/

================================================================================
FILE OPS
================================================================================
staging new (ie. untracked) files and modified files
git add <filename>

Removing files
rm <file>
git rm <file>

Renaming files
git mv <from> <to>

unstaging a file which is staged
git reset HEAD <filename>

removes the changes in the local copy and restore the original copy
git reset --hard HEAD
git reset --hard HEAD~1   # revert to a one version before

discard changes to a modified file
git checkout -- <filename>

================================================================================
DIFF, COMMIT and LOG
================================================================================
see the tracked (modified) and untracked files
git status

To see what is changed but NOT staged:
git diff

To see what is staged will go in the next commit
git diff -cached
git diff -staged

To commit the changes to staging area
git commit -m ""

Automatically stage every tracked file and commit 
git commit -a -m ""

Changing last commit
git commit --amend

git log
Frequent options:
 -p : shows the diff generated for each commit
 -(n) : shows last n commits
 --since=2.weeks
 -stat : shows stats for each commit
 --pretty=oneline : o/p contains each commit on single line
 --pretty=format:"%h - %an, %ar : %s"
 --pretty=format:"%h %s" --graph
 
================================================================================
BRANCH
================================================================================
shows all checked-out branches and points to the current one
git branch

create a new branch or switch to a existing branch
---------------------------------------------------
git checkout -b <new branch> <existing base branch>
git checkout -b 0.8 origin/0.8

Incorporating a finished feature
--------------------------------
git checkout develop
Switched to branch 'develop'

$ git merge --no-ff myfeature
Updating ea1b82a..05e9557
(Summary of changes)

$ git branch -d myfeature
Deleted branch myfeature (was 05e9557).

$ git push origin develop

================================================================================
Working with remote servers
================================================================================
See the remote servers
git remote

See the remote server and the git urls
git remote -v

Add remote repos
git remote add <short name> <url>

Fetch a remote branch, will not merge the local changes
git fetch <remote name>
git fetch origin

Fetched data from the server originally cloned from and tries to merge the changes
git pull

Push changes upstream
git push <remote name> <branch name>
git push origin master

Show more info about a remote
git remote show <remote name>
git remote show origin

Renaming and removing
git remote rname <from> <to>
git remote rm <remote name>

Update local brnach with the remote branch
git fetch origin -v
git fetch upstream -v
git merge upstream/<name of branch>
git push
================================================================================
Tagging
================================================================================
list all the tags
git tag
git tag -l v1.1.*

create an annotated tag
git tag -a v1.1 -m ""

Tag an old commit
git tag -a v1.1 <commit checksum>

create a lighweight tag
git tag v1.1

See info about a specific tag
git show v1.1

Other options:
-s : create a signed annotated tag
-v : verify a tag
================================================================================
STASH
================================================================================
git stash
git stash list
git stash apply

creates a branch from the stashed changes
git stash branch <my branch>
================================================================================
